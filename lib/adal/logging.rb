#-------------------------------------------------------------------------------
# # Copyright (c) Microsoft Open Technologies, Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#   http://www.apache.org/licenses/LICENSE-2.0
#
# THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS
# OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION
# ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A
# PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.
#
# See the Apache License, Version 2.0 for the specific language
# governing permissions and limitations under the License.
#-------------------------------------------------------------------------------

require_relative './logger'

require 'securerandom'

module ADAL
  # Mix-in module for the ADAL logger. To obtain a logger in class methods the
  # calling class will need to extend this module. To obtain a logger in
  # instance methods the calling will need to include this Module.
  module Logging
    DEFAULT_LOG_LEVEL = Logger::ERROR
    DEFAULT_LOG_OUTPUT = STDOUT

    @correlation_id = SecureRandom.uuid
    @log_level = DEFAULT_LOG_LEVEL
    @log_output = DEFAULT_LOG_OUTPUT

    # According to the style guide, class instance variables are preferable to
    # class variables.
    class << self
      attr_accessor :correlation_id
      attr_accessor :log_level
      attr_accessor :log_output
    end

    ##
    # Sets the ADAL log level.
    #
    # Example usage:
    #
    #     ADAL::Logging.log_level = ADAL::Logger::VERBOSE
    #
    def self.log_level=(level)
      unless Logger::SEVS.map.with_index { |_, i| i }.include? level
        fail ArgumentError, "Invalid log level: #{level}."
      end
      @log_level = level
    end

    ##
    # Sets the ADAL log output. All future logs generated by ADAL will be sent
    # to this location. It is not retroactive.
    #
    # @param IO|String output
    #   This can either be STDERR, STDOUT or a String containing a file path.
    def self.log_output=(output)
      output = output.to_s unless output.is_a? IO
      @log_output = output
    end

    ##
    # Creates one ADAL logger per calling class/module with a specified output.
    # This is to be used within ADAL. Clients will have no use for it.
    #
    # Examples usage:
    #
    #   require_relative './logging'
    #
    #   module ADAL
    #     module SomeModule
    #       include Logging
    #
    #       def something_bad
    #         logger.error('An error message')
    #       end
    #     end
    #  end
    #
    # @param output
    #   STDERR, STDOUT or the file name as a string.
    def logger
      @logger ||= ADAL::Logger.new(Logging.log_output, Logging.correlation_id)
      @logger.level = Logging.log_level || DEFAULT_LOG_LEVEL
      @logger
    end
  end
end

require_relative './logger'

module ADAL
  # Mix-in module for the ADAL logger. To obtain a logger in class methods the
  # calling class will need to extend this module. To obtain a logger in
  # instance methods the calling will need to include this Module.
  module Logging
    DEFAULT_LOG_LEVEL = Logger::ERROR
    DEFAULT_LOG_OUTPUT = STDOUT

    # Since Ruby ADAL is a blocking library, only one request will ever be
    # running per thread. So the correlation id at any given time is unique
    # to the thread. By storing it here, we don't need to worry about passing
    # the correlation around between calling classes that may need it.
    #
    # The correlation id can be accessed as ADAL::Logging.correlation_id which
    # will return the thread specific correlation id. This pattern is used by
    # several well known Ruby libraries including ActiveRecord, the Model
    # framework used by Rails.
    @correlation_id = {}

    @log_level = DEFAULT_LOG_LEVEL
    @log_output = DEFAULT_LOG_OUTPUT

    # According to style guide, class instance variables are preferable to
    # class variables.
    class << self
      attr_accessor :log_level
      attr_accessor :log_output

      def correlation_id=(val)
        @correlation_id[Thread.current.object_id] = val
      end

      def correlation_id
        @correlation_id[Thread.current.object_id]
      end

      def remove_correlation_id
        @correlation_id.delete(Thread.current.object_id)
      end
    end

    ##
    # Sets the ADAL log level.
    #
    # Example usage:
    #
    #     ADAL::Logging.log_level = ADAL::Logger::VERBOSE
    #
    def self.log_level=(level)
      unless Logger::SEVS.map.with_index { |_, i| i }.include? level
        fail ArgumentError, "Invalid log level: #{level}."
      end
      @log_level = level
    end

    ##
    # Sets the ADAL log output. All future logs generated by ADAL will be sent
    # to this location. It is not retroactive.
    #
    # @param IO|String output
    #   This can either be STDERR, STDOUT or a String containing a file path.
    def self.log_output=(output)
      output = output.to_s unless output.is_a? IO
      @log_output = output
    end

    ##
    # Creates one ADAL logger per calling class/module with a specified output.
    # This is to be used within ADAL. Clients will have no use for it.
    #
    # Examples usage:
    #
    #   require_relative './logging'
    #
    #   module ADAL
    #     module SomeModule
    #       include Logging
    #
    #       def something_bad
    #         logger.error('An error message')
    #       end
    #     end
    #  end
    #
    # @param output
    #   STDERR, STDOUT or the file name as a string.
    def logger
      @logger ||= ADAL::Logger.new(Logging.log_output, Logging.correlation_id)
      @logger.level = Logging.log_level || DEFAULT_LOG_LEVEL
      @logger
    end
  end
end
